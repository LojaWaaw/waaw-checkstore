<script>
/*
===================================
| DATALAYER ARCHITECTURE: SHOPIFY |
-----------------------------------

DEFINITION:
A data layer helps you collect more accurate analytics data, that in turn allows you to better understand what potential buyers are doing on your website and where you can make improvements. It also reduces the time to implement marketing tags on a website, and reduces the need for IT involvement, leaving them to get on with implementing new features and fixing bugs.

RESOURCES:
http://www.datalayerdoctor.com/a-gentle-introduction-to-the-data-layer-for-digital-marketers/
http://www.simoahava.com/analytics/data-layer/

AUTHORS:
Mechelle Warneke = [{
Email: mechellewarneke@gmail.com,
Website: mechellewarneke.com,
BVACCEL: [{
  Email: mechelle@bvaccel.com,
  Position: XO Strategist | Technical Web Analyst
}]
}];

Tyler Shambora = [{
Website: tylershambora.com,
BVACCEL: [{
  Email: tyler@bvaccel.com,
  Position: Lead Web Developer
}]
}];

EXTERNAL DEPENDENCIES:
* jQuery
* jQuery Cookie Plugin v1.4.1 - https://github.com/carhartl/jquery-cookie
* cartjs - https://github.com/discolabs/cartjs

DataLayer Architecture: Shopify v1.3.1
COPYRIGHT 2016
LICENSES: MIT ( https://opensource.org/licenses/MIT )
*/

/* PRELOADS */ 
// load jquery if it doesn't exist
if(!window.jQuery){var jqueryScript=document.createElement('script');jqueryScript.setAttribute('src','https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js');document.head.appendChild(jqueryScript);}

__bva__jQueryinterval = setInterval(function(){
// --------------------------------------------- wait for jQuery to load
if(window.jQuery){
// --------------- run script after jQuery has loaded

// search parameters
getURLParams = function(name, url){
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
    results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
  };

isElementVisible = function(element) {
  const rect = element.getBoundingClientRect();
  const viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
  const isVisible = (rect.top <= viewHeight) && ((rect.top + rect.height) >= 0);
  const isPartiallyVisible = (rect.left < window.innerWidth) && (rect.right > 0);
  return isVisible && isPartiallyVisible;
}

/* =====================
| DYNAMIC DEPENDENCIES |
--------------------- */

__bva__ = {
  dynamicCart: true,  // if cart is dynamic (meaning no refresh on cart add) set to true
  debug: true, // if true, console messages will be displayed
  cart: null,
  wishlist: null,
  removeCart: null
};

customBindings = {
  cartTriggers: ['form[action="/cart/add"] [type="submit"], .product-form__submit, .product-card__quick-buy'],
  viewCart: ['cart-drawer.show-close-cursor, .sb-cart'],
  removeCartTrigger: ['cart-remove-button, .cart-notification-remove, button[name="minus"], .quantity__button[name="minus"], .line-item input.quantity-input'],
  cartVisableSelector: ['cart-drawer.show-close-cursor, .sb-cart'],
  promoSubscriptionsSelectors: [],
  promoSuccess: [],
  ctaSelectors: [],
  newsletterSelectors: [],
  newsletterSuccess: [],
  searchPage: [],
  wishlistSelector: [],
  removeWishlist: [],
  wishlistPage: [],
  cartLinkSelector: ['.header__icon--cart'],
  searchTermQuery: [getURLParams('q')], // replace var with correct query
};

/* DO NOT EDIT */
defaultBindings = {
  cartTriggers: ['form[action="/cart/add"] [type="submit"],.add-to-cart, .cart-btn'],
  viewCart: ['form[action="/cart"],.my-cart,.trigger-cart,#mobileCart'],
  removeCartTrigger: ['[href*="/cart/change"],  input.quantity-input'],
  cartVisableSelector: ['.inlinecart.is-active,.inline-cart.is-active'],
  promoSubscriptionsSelectors: [],
  promoSuccess: [],
  ctaSelectors: [],
  newsletterSelectors: ['input.contact_email'],
  newsletterSuccess: ['.success_message'],
  searchPage: ['search'],
  wishlistSelector: [],
  removeWishlist: [],
  wishlistPage: []
};

// stitch bindings
objectArray = customBindings;
outputObject = __bva__;

applyBindings = function(objectArray, outputObject){
  for (var x in objectArray) {  
    var key = x;
    var objs = objectArray[x]; 
    values = [];    
    if(objs.length > 0){    
      values.push(objs);
      if(key in outputObject){              
        values.push(outputObject[key]); 
        outputObject[key] = values.join(", "); 
      }else{        
        outputObject[key] = values.join(", ");
      }   
    }  
  }
};

applyBindings(customBindings, __bva__);
applyBindings(defaultBindings, __bva__);

/* =======================
| PREREQUISITE LIBRARIES |
----------------------- */
  
  clearInterval(__bva__jQueryinterval);

    // jquery-cookies.js
    if(typeof $.cookie!==undefined){(function(a){if(typeof define==='function'&&define.amd){define(['jquery'],a)}else if(typeof exports==='object'){module.exports=a(require('jquery'))}else{a(jQuery)}}(function($){var g=/\+/g;function encode(s){return h.raw?s:encodeURIComponent(s)}function decode(s){return h.raw?s:decodeURIComponent(s)}function stringifyCookieValue(a){return encode(h.json?JSON.stringify(a):String(a))}function parseCookieValue(s){if(s.indexOf('"')===0){s=s.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,'\\')}try{s=decodeURIComponent(s.replace(g,' '));return h.json?JSON.parse(s):s}catch(e){}}function read(s,a){var b=h.raw?s:parseCookieValue(s);return $.isFunction(a)?a(b):b}var h=$.cookie=function(a,b,c){if(arguments.length>1&&!$.isFunction(b)){c=$.extend({},h.defaults,c);if(typeof c.expires==='number'){var d=c.expires,t=c.expires=new Date();t.setMilliseconds(t.getMilliseconds()+d*864e+5)}return(document.cookie=[encode(a),'=',stringifyCookieValue(b),c.expires?'; expires='+c.expires.toUTCString():'',c.path?'; path='+c.path:'',c.domain?'; domain='+c.domain:'',c.secure?'; secure':''].join(''))}var e=a?undefined:{},cookies=document.cookie?document.cookie.split('; '):[],i=0,l=cookies.length;for(;i<l;i++){var f=cookies[i].split('='),name=decode(f.shift()),cookie=f.join('=');if(a===name){e=read(cookie,b);break}if(!a&&(cookie=read(cookie))!==undefined){e[name]=cookie}}return e};h.defaults={};$.removeCookie=function(a,b){$.cookie(a,'',$.extend({},b,{expires:-1}));return!$.cookie(a)}}))}

    /* ======================
    | Begin dataLayer Build |
    ---------------------- */

    // if debug
    if(__bva__.debug){
      console.log('=====================\n| DATALAYER SHOPIFY |\n---------------------');
      console.log('Page Template: {{ template }}');
    }
    
    window.dataLayer = window.dataLayer || [];  // init data layer if doesn't already exist
    dataLayer.push({'event': 'cs_begin_dataLayer'}); // begin datalayer

    var template = "{{template}}"; 

    /* Landing Page Cookie
    -----------------------
    1. Detect if user just landed on the site
    2. Only fires if Page Title matches website */

    $.cookie.raw = true;
    if ($.cookie('landingPage') === undefined || $.cookie('landingPage').length === 0) {
      var landingPage = true;
      $.cookie('landingPage', unescape);
      $.removeCookie('landingPage', {path: '/'});
      $.cookie('landingPage', 'landed', {path: '/'});
    } else {
      var landingPage = false;
      $.cookie('landingPage', unescape);
      $.removeCookie('landingPage', {path: '/'});
      $.cookie('landingPage', 'refresh', {path: '/'});
    }
    if (__bva__.debug) {
      console.log('Landing Page: ' + landingPage);
    }

    /* Log State Cookie
    ------------------- */
    {% if customer %}
      var isLoggedIn = true;
    {% else %}
      var isLoggedIn = false;
    {% endif %}

      // SIGN UP EVENT

     // Verifica se o usuário acabou de se cadastrar
     if (localStorage.getItem('new_signup') === 'true') {

      dataLayer.push({
        'event': 'sign_up',
        'user_id': "{{ customer.id }}",
        'user_email': "{{ customer.email }}",
        'user_name': "{{ customer.first_name }} {{ customer.last_name }}"
      });

      if (__bva__.debug) {
        console.log('GA4 Event: sign_up');
      }

      // Remove o indicador para evitar duplicação
      localStorage.removeItem('new_signup');
      }

    if (!isLoggedIn) {
      $.cookie('logState', unescape);
      $.removeCookie('logState', {path: '/'});
      $.cookie('logState', 'loggedOut', {path: '/'});
    } else {
      if ($.cookie('logState') === 'loggedOut' || $.cookie('logState') === undefined) {
        $.cookie('logState', unescape);
        $.removeCookie('logState', {path: '/'});
        $.cookie('logState', 'firstLog', {path: '/'});
      } else if ($.cookie('logState') === 'firstLog') {
        $.cookie('logState', unescape);
        $.removeCookie('logState', {path: '/'});
        $.cookie('logState', 'refresh', {path: '/'});
      }
    }

    if ($.cookie('logState') === 'firstLog') {
      var firstLog = true;

      dataLayer.push({
        'event': 'login',
        'user_id': "{{ customer.id }}",
        'user_email': "{{ customer.email }}",
        'user_name': "{{ customer.first_name }} {{ customer.last_name }}"
      });

      if (__bva__.debug) {
        console.log('GA4 Event: login');
      }
    } else {
      var firstLog = false;
    }

    /*==========
    | DATALAYERS |
     ----------- */

    /* DATALAYER: Landing Page
    --------------------------
    Fires any time a user first lands on the site. */

    window.DataLayer = {
      selectColor: function () {
        $('.select-grouped-item').on('click', function(e) {
          let productHandle = e.target.getAttribute('href');
          let productColor = e.target.getAttribute('title');
          if(!productHandle) {
            productHandle = e.target.closest('.select-grouped-item').getAttribute('href');
            productColor = e.target.closest('.select-grouped-item').getAttribute('title');
          }
  
          fetch(`${productHandle}.json`)
            .then((response) => response.text())
            .then((responseText) => {
              var product = JSON.parse(responseText).product;
              var item = {
                'item_id'         : String(product.id),
                'item_variant'    : product.variants[0].id,
                'item_name'       : product.title,
                'price'           : Number(product.variants[0].price),
                'item_brand'      : product.vendor,
                'item_category'   : product.product_type,
                'selected_color'  : productColor,
                'description'     : product.body_html.trim(),
                'imageURL'        : product.image.src,
                'productURL'      : window.routes.shop + '/products/' + product.handle
              };

              var emarsys = {
                'selected_color'  : productColor,
              };
  
              if (item.item_name) {
                dataLayer.push({
                  'event': 'cs_select_color',
                  item,
                  emarsys
                });
              }
              
              if(__bva__.debug){
                console.log("Product"+" :"+JSON.stringify(item, null, " "));
              }
            });
        })
      },

      selectSize: function () {
        $('.product-form__input[data-type="size"] .item label').on('click', function(e) {
          e.stopImmediatePropagation();
          let productHandle = e.target.closest('variant-radios').dataset.url;
          let productSize = e.target.closest('.item').dataset.value;
  
          fetch(`${productHandle}.json`)
            .then((response) => response.text())
            .then((responseText) => {
              var product = JSON.parse(responseText).product;
              var item = {
                'item_id'         : String(product.id),
                'item_variant'    : product.variants[0].id,
                'item_name'       : product.title,
                'price'           : Number(product.variants[0].price),
                'item_brand'      : product.vendor,
                'item_category'   : product.product_type,
                'selected_size'   : productSize,
                'description'     : product.body_html.trim(),
                'imageURL'        : product.image.src,
                'productURL'      : window.routes.shop + '/products/' + product.handle
              };

              var emarsys = {
                'selected_size'  : productSize,
              };
  
              if (item.item_name) {
                dataLayer.push({
                  'event': 'cs_select_size',
                  item,
                  emarsys
                });
              }
              
              if(__bva__.debug){
                console.log("Product"+" :"+JSON.stringify(item, null, " "));
              }
            });
        })
      }
    }

    if ($.cookie('landingPage') === 'landed') {
      dataLayer.push({
        'pageType': 'Landing',
        'event': 'cs_first_time_visitor'
      });
    }

    /* DATALAYER: Log State
    -----------------------
    1. Determine if user is logged in or not.
    2. Return User specific data. */

    var logState = {
      'userProperties': {
        {% if customer %}
          visitor_type: "logged_in",
          customer_id: "{{ customer.id }}",
          customer_email: "{{ customer.email }}",
          customer_first_name: "{{ customer.first_name }}",
          customer_last_name: "{{ customer.last_name }}",
          customer_phone: {{ customer.default_address.phone | json }},
          customer_city: {{ customer.default_address.city | json }},
          customer_zip: {{ customer.default_address.zip | json }},
          customer_address_1: {{ customer.default_address.address1 | json }},
          customer_address_2: {{ customer.default_address.address2 | json }},
          customer_country: {{ customer.default_address.country | json }},
          customer_province: {{ customer.default_address.province | json }},
          customer_province_code: {{ customer.default_address.province_code | json }},
          customer_order_count: "{{ customer.orders_count | json }}",
          customer_total_spent: "{{ customer.total_spent | json }}",
          customer_tags: "{{ customer.tags | join: ', ' }}",
          user_consent: "{{ customer.accepts_marketing | json }}"
        {% else %}
          visitor_type: "guest",
        {% endif %}
      },
      'deviceType'      : /iPad/.test(navigator.userAgent)?"tablet":/Mobile|iP(hone|od)|Android|BlackBerry|IEMobile|Silk/.test(navigator.userAgent)?"mobile":"desktop",
      'timeStamp'       : new Date().toISOString(),
      'currency'      : {{shop.currency | json}},
    }

    dataLayer.push(logState);

    /*DATALAYER: Homepage
    --------------------------- */

    if(document.location.pathname == "/"){
      var homepage = {
        'pageType' : 'Homepage',
        'event'    : 'cs_homepage'
      };
      dataLayer.push(homepage);
      if(__bva__.debug){
        console.log("Homepage"+" :"+JSON.stringify(homepage, null, " "));
      }

      document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.shopify-section--featured-collection').forEach((section, sectionIndex) => {
          const collectionTitle = section.querySelector('.section-header__title')?.textContent.trim() || `Seção ${sectionIndex + 1}`;
          const productsElements = section.querySelectorAll('.product-card');

          const items = Array.from(productsElements).map((productElement, index) => {
            const productId = productElement.getAttribute('data-item-id');
            const variantId = productElement.getAttribute('data-product-variant');
            const productName = productElement.querySelector('.product-card__title')?.textContent.trim() || 'Produto sem nome';
            const productPrice = productElement.getAttribute('data-product-price');
            const productBrand = productElement.getAttribute('data-brand') || '';
            const productCategory = productElement.getAttribute('data-category') || '';
            
            return {
              'item_index': index,
              'item_id': productId,
              'item_variant': variantId,
              'item_name': productName,
              'price': parseFloat(productPrice),
              'item_brand': productBrand,
              'item_category': productCategory,
              'item_list_name': collectionTitle
            };
          });

          if (items.length) {
            dataLayer.push({ ecommerce: null }); // Clean Prevent Items

            dataLayer.push({
              'event': 'view_item_list',
              'ecommerce': {
                'item_list_name': collectionTitle,
                'items': items
              }
            });
          }

          // Capturar clique nos produtos
          productsElements.forEach((productElement, index) => {
            productElement.setAttribute('data-index', index);

            productElement.addEventListener('click', function () {
              const selectedItem = items[index];

              if (selectedItem) {
                dataLayer.push({ ecommerce: null }); // Clean Prevent Items

                dataLayer.push({
                  'event': 'select_item',
                  'ecommerce': {
                    'items': [selectedItem]
                  }
                });
              }
            });
          });
        });
      });
    }

    /** 
    * DATALAYER: 404 Pages
    * Fire on 404 Pages */
    {% if template contains '404' %}
      dataLayer.push({
        'event':'cs_404',
        'page': window.location.pathname 
      });
    {% endif %}

    /* DATALAYER: Blog Articles
    ---------------------------
    Fire on Blog Article Pages */

    {% if template contains 'article' %}
      var blog = {
        'author'      : '{{article.author}}',
        'title'       : '{{article.title}}',
        'dateCreated' : '{{article.created_at}}',
        'event'       : 'cs_blog'
      };
      dataLayer.push(blog);
      if(__bva__.debug){
        console.log("Blog"+" :"+JSON.stringify(blog, null, " "));
      }
    {% endif %}

    /* DATALAYER: Product List Page (Collections, Category)
    -------------------------------------------------------
    Fire on all product listing pages. */

    {% if template contains 'collection' %}
      let index = 0;
      var ecommerce = {
        'currency': '{{ shop.currency }}',
        'item_list_id'    : "{{ collection.handle | prepend: 'category_' |  downcase }}",
        'item_list_name'  : "Category: {{collection.title }}",
        'items': [
          {% for product in collection.products %}
            {
              'item_id'         : "{{ product.id | json }}",                  
              'item_variant'    : {{ product.selected_or_first_available_variant.id | json }},             
              'item_name'       : {{ product.title | json }},
              'price'           : {{ product.price | money_without_currency | replace: ',', '.' | json }},
              'item_brand'      : {{ product.vendor | json }},
              'item_category'   : {{ product.type | json }},
              'item_list_id'    : "{{ collection.handle | prepend: 'category_' |  downcase }}",
              'item_list_name'  : "Category: {{collection.title }}",
              'imageURL'        : "https:{{product.featured_image.src | img_url:'grande' }}", 
              'productURL'      : '{{shop.secure_url}}{{product.url}}',
              'sku'             : {{product.selected_or_first_available_variant.sku | json}},
              'index'           : index++
            },
          {% endfor %}
        ]
      };  
      dataLayer.push({ ecommerce: null }); // Clean Prevent Items

      dataLayer.push({
        'event'           : 'view_item_list',
        ecommerce
      });
      
      var emarsys = {
        'content_id'      : '{{collection.id | json}}',
        'content_title'   : {{collection.title | json}},
        'content_category': {{collection.type | json}},
        'content_url'     : '{{ shop.url | append: collection.url }}',
      };

      dataLayer.push({
        'event': 'cs_view_category',
        emarsys,
      });

      if(__bva__.debug){
          console.log("Collection"+" :"+JSON.stringify(ecommerce, null, " "));
      }

      document.querySelectorAll('.product-card').forEach((productElement) => {
        productElement.addEventListener('click', function () {
          const productId = this.getAttribute('data-item-id');

          // Encontra o item correspondente no array ecommerce.items
          const selectedItem = ecommerce.items.find(item => item.item_id == productId);

          if (selectedItem) {
            dataLayer.push({ ecommerce: null }); // Clean Prevent Items

            dataLayer.push({
              'event': 'select_item',
              'ecommerce': {
                'items': [selectedItem]
              }
            });
          }
        });
      });
    {% endif %}

    // View / Add / Remove Cart (cart page and cart drawer)

    /* DATALAYER: view_item
      --------------------------
    Fire on all Product View pages. */
    {% if template contains 'product' %}
        var viewItem = {
          'event': 'view_item',
          'ecommerce': {
            'currency': 'BRL',
            'value': {{ product.selected_or_first_available_variant.price }} / 100,
            items: [{
              'item_id'         : {{ product.id | json }},
              'item_name'       : '{{ product.title }}',
              'currency'        : 'BRL',
              'index'           : 0,
              'item_category'   : {{ product.type | json }},
              'item_variant'    : {{ product.selected_or_first_available_variant.id | json}},
              'price'           : {{ product.selected_or_first_available_variant.price }} / 100,
            }]
          }
        };
        dataLayer.push({ ecommerce: null }); // Clean Prevent Items

        dataLayer.push(viewItem);
      
        /* DATALAYER: add-to-cart
        --------------------------*/
        $(__bva__.cartTriggers).click(function(){
          var quantity = $('.quantity-selector__input').val()
          var addToCart = {     
            'event'    : 'add_to_cart_1',
            'ecommerce': {
              'currency': 'BRL',
              'value': ({{ product.selected_or_first_available_variant.price }} * Number(quantity)) / 100,
              items: [{
                'item_id'         : '{{ product.id | json }}',
                'item_name'       : '{{ product.title }}',
                'index'           : 0,
                'item_category'   : {{ product.type | json }},
                'price'           : {{ product.selected_or_first_available_variant.price }} / 100,
                'quantity'        : Number(quantity),
                'item_variant'    : {{ product.selected_or_first_available_variant.id | json }}
              }]
            }
          };
          dataLayer.push({ ecommerce: null }); // Clean Prevent Items

          dataLayer.push(addToCart);
        });

    {% else %}
      $(__bva__.cartTriggers).click(function(){
        const product_card = $(this).closest('.product-card')
        const currentUrl = window.location.pathname;
        let section = ''

        if (currentUrl == '/') {
          section = "home"
        } else {
          let linkURL = currentUrl.split('/')
          section = linkURL[linkURL.length - 1]
        }

        var addToCart = {                    
          'event': 'add_to_cart_2',
          'ecommerce': {
            'currency'        : "BRL",
            'value': Number(product_card.attr('data-product-price')) / 100,
            'items': [{
              'item_id'         : product_card.attr('data-item-id'),                
              'item_name'       : product_card.attr('data-product-name'),
              'item_category'   : product_card.attr('data-product-category'),
              'index'           : product_card.attr('data-index'),
              'price'           : Number(product_card.attr('data-product-price')) / 100,
              'quantity'        : 1,
              'item_variant'    : product_card.attr('data-product-variant'),
            }]
          }
        };
        dataLayer.push({ ecommerce: null }); // Clean Prevent Items

        dataLayer.push(addToCart);
      })
    {% endif %}

    /* DATALAYER: Cart View
    -----------------------
    1. Fire anytime a user views their cart (non-dynamic) */

    $('#cart-icon-bubble').on('click', function(event) {
      var ecommerce = {
        'currency': {{cart.currency.iso_code | json}},
        'value': Number({{cart.total_price | divided_by: 100.0 | json}}),
        'items':[{% for line_item in cart.items %}{
          'item_id'         : "{{line_item.product.id | json}}",                  
          'item_name'       : {{line_item.product.title | json}},
          'item_category'   : {{line_item.product.type | json}},
          'price'           : Number({{line_item.product.price | money_without_currency | replace: ',', '.' | json}}),
          'quantity'        : {{line_item.quantity | json}},
        },{% endfor %}],
      };
      
      dataLayer.push({ ecommerce: null }); // Clean Prevent Items

      dataLayer.push({
        'event': 'view_cart',
        ecommerce
      });

    })

    // Função para comparar o novo estado com o anterior
    function compareCartStates(previous, current) {
      if (!previous) return; // Se não houver estado anterior, não faz nada

      // Mapear itens do estado anterior por `item_id` para facilitar a comparação
      const previousItemsMap = new Map(previous.items.map(item => [item.item_id, item]));

      // Iterar sobre os itens do estado atual
      current.items.forEach(currentItem => {
        const previousItem = previousItemsMap.get(currentItem.item_id);

        if (previousItem) {
          // Verificar mudanças de quantidade
          if (currentItem.quantity > previousItem.quantity) {
            const quantityAdded = currentItem.quantity - previousItem.quantity;
            dataLayer.push({ ecommerce: null }); // Clean Prevent Items

            dataLayer.push({
              event: 'add_to_cart_3',
              ecommerce: {
                currency: current.currency,
                value: quantityAdded * currentItem.price, // Valor adicionado
                items: [{
                  ...currentItem,
                  quantity: quantityAdded
                }]
              }
            });
          } else if (currentItem.quantity < previousItem.quantity) {
            const quantityRemoved = previousItem.quantity - currentItem.quantity;
            dataLayer.push({ ecommerce: null }); // Clean Prevent Items

            dataLayer.push({
              event: 'remove_from_cart',
              ecommerce: {
                currency: current.currency,
                value: quantityRemoved * currentItem.price, // Valor removido
                items: [{
                  ...currentItem,
                  quantity: quantityRemoved
                }]
              }
            });
          }

          // Remover o item processado do mapa
          previousItemsMap.delete(currentItem.item_id);
        } else {
          // Item novo adicionado
          dataLayer.push({ ecommerce: null }); // Clean Prevent Items

          dataLayer.push({
            event: 'add_to_cart_4',
            ecommerce: {
              currency: current.currency,
              value: currentItem.quantity * currentItem.price, 
              items: [currentItem]
            }
          });
        }
      });

      // Itens restantes no mapa foram removidos
      previousItemsMap.forEach(removedItem => {
        dataLayer.push({ ecommerce: null }); // Clean Prevent Items

        dataLayer.push({
          event: 'remove_from_cart',
          ecommerce: {
            currency: current.currency,
            value: removedItem.quantity * removedItem.price, // Valor total do item removido
            items: [removedItem]
          }
        });
      });
    }

    {% if template contains 'cart' %}
      var ecommerce = {
        'currency': {{cart.currency.iso_code | json}},
        'value': Number({{cart.total_price | divided_by: 100.0 | json}}),
        'items':[{% for line_item in cart.items %}{
          'item_id'         : "{{line_item.product.id | json }}",                  
          'item_name'       : {{ line_item.product.title | json }},
          'currency'        : {{cart.currency.iso_code | json }},           
          'item_brand'      : {{ line_item.product.vendor | json }},
          'item_category'   : {{ line_item.product.type | json }},
          'price'           : {{ line_item.product.selected_or_first_available_variant.price }} / 100,
          'quantity'        : {{ line_item.quantity | json}},
          'item_variant'    : {{ line_item.product.selected_or_first_available_variant.id | json }},
        },{% endfor %}],
      };

      // Recupera o estado anterior do localStorage
      let previousEcommerceState = JSON.parse(localStorage.getItem('previousEcommerceState'));

      // Comparar o estado anterior com o atual
      compareCartStates(previousEcommerceState, ecommerce);

      // Salvar o novo estado no localStorage para comparação no próximo carregamento
      localStorage.setItem('previousEcommerceState', JSON.stringify(ecommerce));

    {% endif %}

    function triggerViewCartEvent() {
      // Aguarda 500ms para que a atualização do carrinho seja concluída (caso seja uma chamada AJAX)
      setTimeout(function(){
        fetch('/cart.js')
          .then(function(response) {
            if (!response.ok) {
              throw new Error('Erro ao obter os dados do carrinho.');
            }
            return response.json();
          })
          .then(function(cart) {
            // Constrói o objeto ecommerce utilizando o preço unitário e, se disponível, o preço original (sem desconto)
            var ecommerceData = {
              'currency': cart.currency || 'BRL',
              'value': Number(cart.total_price / 100), // valor total do carrinho
              'items': cart.items.map(function(item, cart_index) {
                // Se existir "original_price", ele representa o valor unitário sem desconto.
                var unitPrice = item.original_price ? Number(item.original_price / 100) : Number(item.price / 100);
                return {
                  'item_id': String(item.product_id || item.id),
                  'item_variant': item.variant_id || item.getAttribute('data-product-variant'),
                  'item_name': item.title,
                  'price': unitPrice, // preço unitário
                  'item_brand': item.vendor || '',
                  'item_category': item.product_type || '',
                  'quantity': item.quantity,
                  'index': cart_index++,
                };
              })
            };

            // compareCartStates(previousEcommerceState, ecommerceData)
            dataLayer.push({ ecommerce: null }); // Clean Prevent Items

            dataLayer.push({
              'event': 'view_cart',
              'ecommerce': ecommerceData
            });
            
          })
          .catch(function(error) {
            if(__bva__.debug) {
              console.log('[datalayer_cart_fix] Erro ao obter os dados do carrinho:', error);   
            }
          });
      }, 500);
    }

    // ==========================================================================
    // Função para anexar os event listeners aos elementos responsáveis pelas ações no carrinho
    // ==========================================================================

    function attachCartEventListeners() {
      // 1. Ação de adicionar itens (ex.: quick-add em cards de produto)
      jQuery(document).on('click', 'form[action^="/cart/add"] [type=submit], .product-form__submit', function(){
        triggerViewCartEvent();
      });

      // 2. Ação de remover itens (botões de remover do mini-cart e da página de carrinho)
      jQuery(document).on('click', '.cart-drawer [data-action="remove"], .cart-remove-button, .cart-notification-remove, button[name="minus"], .quantity__button[name="minus"]', function(){
        triggerViewCartEvent();
      });

      // 2. Ação de remover itens (botões de remover do mini-cart e da página de carrinho)
      jQuery(document).on('click', '.cart-drawer [data-action="remove"], .cart-remove-button, .cart-notification-remove, button[name="minus"], .quantity__button[name="minus"]', function(){
        triggerViewCartEvent();
      });

      // 3. Alteração direta na quantidade (inputs de quantidade no mini-cart)
      jQuery(document).on('change', '.cart-drawer input.quantity-input', function() {

        const changedElement = jQuery(this);
        const productContainer = changedElement.closest('[data-item-id]');

        if (!productContainer.length) {
          console.error('[datalayer_cart_fix] Elemento pai com atributos data-* não encontrado.');
          return;
        }

        // Extraia os dados dos atributos data-*.
        const itemId = productContainer.data('item-id');
        const itemVariant = productContainer.data('item-variant');
        const itemName = productContainer.data('item-name');
        const itemPrice = Number(productContainer.data('item-price')) / 100;
        const itemBrand = productContainer.data('item-brand');
        const itemCategory = productContainer.data('item-category');
        const itemLastQuantity = parseInt(productContainer.data('item-quantity'), 10);
        const itemIndex = parseInt(productContainer.data('item-index'), 10);

        // 1. Tentar .val() 
        let itemNewQuantity = parseInt(changedElement.val(), 10);

        // 2. Se .val() retornar NaN, tentar acessar a propriedade .value diretamente (para custom elements)
        if (isNaN(itemNewQuantity)) {
          itemNewQuantity = parseInt(changedElement[0].value, 10); // Acessa o elemento DOM *real*
        }

        // 3. Se AINDA for NaN, algo está muito errado. Registrar erro e usar um valor padrão (0) para evitar quebrar o dataLayer.
        if (isNaN(itemNewQuantity)) {
          console.error('[datalayer_cart_fix] Não foi possível obter o novo valor da quantidade. Usando 0 como padrão.');
          itemNewQuantity = 0; 
        }

        // --- Cálculo da diferença e decisão de evento ---
        const quantityDifference = itemNewQuantity - itemLastQuantity;

        if (quantityDifference > 0) {
          const dataLayerObject = {
            event: 'add_to_cart_5',
            ecommerce: {
              currency: '{{ cart.currency.iso_code }}',
              value: quantityDifference * itemPrice,
              items: [{
                item_id: itemId,
                item_variant: itemVariant,
                item_name: itemName,
                price: itemPrice,
                item_category: itemCategory,
                quantity: quantityDifference,
                index: itemIndex
              }]
            }
          };
          dataLayer.push({ ecommerce: null });
          dataLayer.push(dataLayerObject);

          dataLayer.push({ ecommerce: null });
          // currentCartPush(itemId, itemNewQuantity);
          triggerViewCartEvent()

        } else if(quantityDifference < 0) {
          const dataLayerObject = {
            event: 'remove_from_cart', // Evento de remover do carrinho
            ecommerce: {
              currency: '{{cart.currency.iso_code}}', // Ajuste se necessário
              value: Math.abs(quantityDifference) * itemPrice, // Valor absoluto da diferença
              items: [{
                item_id: itemId,
                item_variant: itemVariant,
                item_name: itemName,
                price: itemPrice,
                item_category: itemCategory,
                quantity: Math.abs(quantityDifference), // Quantidade REMOVIDA (valor absoluto)
                index: itemIndex
              }]
            }
          };

          dataLayer.push({ ecommerce: null }); // Clean Prevent Items
          dataLayer.push(dataLayerObject);

          dataLayer.push({ ecommerce: null }); // Clean Prevent Items
          // currentCartPush(itemId, itemNewQuantity);
          triggerViewCartEvent()
          }

        // Atualiza o data-item-quantity no productContainer para a próxima alteração
        productContainer.data('item-quantity', itemNewQuantity);
      })

      function currentCartPush(item_id, item_new_quantity) {
        let cartPrice = 0;
        
        let viewCartObject = {
          event: 'view_cart', // Dispara em alteração de qtde. drawer
          ecommerce: {
            'currency': {{cart.currency.iso_code | json}},
            'value': Number(cartPrice / 100 ),
            items:[
              {% for line_item in cart.items %}
                {
                  'item_id'       : "{{ line_item.product.id | json }}",         
                  'item_name'     : {{ line_item.product.title | json }},
                  'item_category' : {{ line_item.product.type | json }},
                  'price'         : Number({{ line_item.product.price | money_without_currency | replace: ',', '.' | json }}),
                  'quantity'      : Number({{ line_item.product.id }}) == item_id ? item_new_quantity : {{ line_item.quantity | json }},
                },
                {% endfor %}
              ],
          }
        }

        for ( let i=0; i<viewCartObject.ecommerce.items.length; i++ ) {
          cartPrice += Number(viewCartObject.ecommerce.items[i]['price']) * Number(viewCartObject.ecommerce.items[i]['quantity']);
        }

        viewCartObject.ecommerce.value = cartPrice;
        console.log('view cart obj.', viewCartObject);

        dataLayer.push(viewCartObject)
      }
      
     
      {% if template contains 'cart' %}
        // 4. Alteração direta na quantidade (inputs dentro de <line-item-quantity> na página /cart)
        jQuery(document).on('change', 'line-item-quantity input.quantity-input', function(){
          triggerViewCartEvent();
        });
      {% endif %}

      // 5. Ação de remoção via link dentro do <line-item-quantity> (elemento "Remover")
      jQuery(document).on('click', 'line-item-quantity a.link[href*="quantity=0"], .cart-drawer__remove-link', function(event){
        const clickedElement = jQuery(this);

        const productContainer = clickedElement.closest('[data-item-id]');

        if (!productContainer.length) {
            console.error('[datalayer_cart_fix] Elemento pai com atributos data-* não encontrado.');
            return; 
        }
        // 3. Extraia os dados dos atributos data-*.
        const itemId = productContainer.data('item-id');
        const itemVariant = productContainer.data('item-variant');
        const itemName = productContainer.data('item-name');
        const itemPrice = parseFloat(productContainer.data('item-price')) / 100;
        const itemBrand = productContainer.data('item-brand');
        const itemCategory = productContainer.data('item-category');
        const itemQuantity = parseInt(productContainer.data('item-quantity'), 10); 
        const itemIndex = parseInt(productContainer.data('item-index'),10);

        // 4. Construa o objeto de dados para o dataLayer.
        const dataLayerObject = {
          event: 'remove_from_cart',
          ecommerce: {
            currency: '{{cart.currency.iso_code}}',
            value: itemQuantity * itemPrice,
            items: [{
              item_id: itemId,
              item_variant: itemVariant,
              item_name: itemName,
              price: itemPrice,
              item_category: itemCategory,
              quantity: itemQuantity,
              index: itemIndex
            }]
          }
        };
        dataLayer.push({ ecommerce: null }); // Clean Prevent Items

        dataLayer.push(dataLayerObject);

        triggerViewCartEvent();
      })

      // 6. Ação ao abrir o mini-cart via clique no header (link que abre o carrinho)
      jQuery(document).on('click', 'a[href="/cart"][data-no-instant].relative.tap-area', function(){
        triggerViewCartEvent();
      });
    }

    // ==========================================================================
    // Inicializa os event listeners quando o DOM estiver pronto
    // ==========================================================================

    jQuery(document).ready(function(){
      attachCartEventListeners();

      // Se estiver na página /cart, dispara o evento view_cart ao carregar a página
      if(window.location.pathname.indexOf('/cart') !== -1){
        triggerViewCartEvent();
      }
    });

    /* Fire when open quick view */
    $('.product-popup-quickview').on('click', function(e) {
      let productHandle = e.target.dataset.handle;
      if(!productHandle) {
        productHandle = e.target.closest('.product-popup-quickview').dataset.handle;
      }

      fetch(`/products/${productHandle}.json`)
        .then((response) => response.text())
        .then((responseText) => {
          var product = JSON.parse(responseText).product;
          var item = {
            'item_id'         : String(product.id),
            'item_variant'    : product.variants[0].id,
            'item_name'       : product.title,
            'price'           : Number(product.variants[0].price),
            'item_brand'      : product.vendor,
            'item_category'   : product.product_type,
            'description'     : product.body_html.trim(),
            'imageURL'        : product.image.src,
            'productURL'      : window.routes.shop + '/products/' + product.handle
          };

          if (item.item_name) {
            dataLayer.push({ ecommerce: null }); // Clean Prevent Items

            dataLayer.push({
              'event': 'cs_select_item',
              item,
            });
            dataLayer.push({
              'event': 'cs_view_item',
              item,
            });
          }
          
          if(__bva__.debug){
            console.log("Product"+" :"+JSON.stringify(item, null, " "));
          }
        });
      
      $('.product-popup-modal__content-info').bind('DOMSubtreeModified', function(e){
        window.DataLayer.selectSize();
      });
    })

    /** DATALAYER: Checkout on Shopify Plus **/
    if(Shopify.Checkout){
      var ecommerce = {
        'transaction_id': '{{checkout.order_number  | json}}',
        'affiliation': {{shop.name | json}},
        'value': Number({{checkout.total_price | money_without_currency | json}}.replaceAll(",", "").replace(",", ".")),
        'tax': {{checkout.tax_price | money_without_currency | replace: ',','.' | json}},
        'shipping': {{checkout.shipping_price | money_without_currency | replace: ',','.' | json}},
        'subtotal': {{checkout.subtotal_price | money_without_currency| replace: ',','.' | json}},
        'currency': {{checkout.currency | json}},
        {% for discount in checkout.discounts %}
        'coupon': {{discount.code | json}},
        'discount'  : {{discount.amount | money_without_currency | json}},
        {% endfor %}
        'email': {{checkout.email | json}},
        'items':[{% for line_item in checkout.line_items %}{
          'item_id'        : '{{line_item.product.id | json}}',                  
          'item_variant'    : {{line_item.variant.title | json}},             
          'item_name'      : {{line_item.product.title | json}},
          'price'           : Number({{line_item.product.price | money_without_currency| json}}.replaceAll(",", "").replace(",", ".")),
          'item_brand'      : {{line_item.product.vendor | json}},
          'item_category'   : {{line_item.product.type | json}},
          'item_list_name'  : {{line_item.collection.title | json}},
          'quantity'        : {{line_item.quantity | json}},
          'discount'		  : {{discount.code | json}}
          },
        {% endfor %}],
        'emarsys': {
          'items': [{% for line_item in checkout.line_items %}{
            'content_id'      : '{{line_item.id | json}}',
            'content_title'   : {{line_item.title | json}},
            'content_price'   : Number({{line_item.price | money_without_currency | json}}.replaceAll(",", "").replace(",", ".")),
            'content_category': {{line_item.type | json}},
            'content_url'     : '{{line_item.url | json}}',
          },{% endfor %}]
        }
      };

      if(Shopify.Checkout.step){
        if(Shopify.Checkout.step.length > 0){
          if (Shopify.Checkout.step === 'contact_information'){
            dataLayer.push({
              'event'    :'cs_begin_checkout',
              'step': 1,
              ecommerce
            });
          } else if (Shopify.Checkout.step === 'shipping_method'){
            dataLayer.push({
              'event'    :'cs_add_shipping_info',
              ecommerce
            });
          } else if( Shopify.Checkout.step === "payment_method" ){
            dataLayer.push({
              'event'    :'cs_add_payment_info',
              ecommerce
            });
          }
        }
                                
        /** DATALAYER: Transaction */
        if(Shopify.Checkout.page == "thank_you"){
          transactionData = {
            'transactionNumber'      : {{checkout.order_id | json}},
            'transactionId'          : {{checkout.order_number | json}},
            'transactionAffiliation' : {{shop.name | json}},
            'transactionTotal'       : Number({{checkout.total_price | money_without_currency | json}}.replaceAll(",", "").replace(",", ".")),
            'transactionTax'         : Number({{checkout.tax_price | money_without_currency | json}}.replaceAll(",", "").replace(",", ".")),
            'transactionShipping'    : Number({{checkout.shipping_price | money_without_currency| json}}.replaceAll(",", "").replace(",", ".")),
            'transactionSubtotal'    : Number({{checkout.subtotal_price | money_without_currency| json}}.replaceAll(",", "").replace(",", ".")),
            {% for discount in checkout.discounts %}
            'coupon' : {{discount.code | json}},
            'discount': Number({{discount.amount | money_without_currency | json}}),
            {% endfor %}
            'items':[{% for line_item in checkout.line_items %}{
              'item_id'        : '{{line_item.product.id | json}}',                  
              'item_variant'    : {{line_item.variant.title | json}},             
              'item_name'      : {{line_item.product.title | json}},
              'price'           : Number({{line_item.product.price | money_without_currency | json}}.replaceAll(",", "").replace(",", ".")),
              'item_brand'      : {{line_item.product.vendor | json}},
              'item_category'   : {{line_item.product.type | json}},
              'item_list_name'  : {{line_item.collection.title | json}},
              'quantity'        : {{line_item.quantity | json}},
              'discount'		  : {{discount.code | json}}
              },
            {% endfor %}],
          }
          dataLayer.push({
            'event'    :'cs_purchase',
            transactionData
          });
        }
      }

      if(__bva__.debug){
        console.log("Checkout"+" :"+JSON.stringify(ecommerce, null, " "));
      }
    }

      /* DATALAYER: Newsletter Subscription
      ------------------------------------- */
      __bva__newsletter_fire = 0;
      $(document).on('click', __bva__.newsletterSelectors, function () {
        if(__bva__newsletter_fire !== 1){
        __bva__newsletter_fire = 1;
        var newsletterCheck = setInterval(function () {
        // -------------------------------------- begin check interval
          if ($(__bva__.newsletterSuccess).length > 0) {
          // ------------------------------------------------------------------ check visible selectors
            clearInterval(newsletterCheck);
            dataLayer.push({'event': 'cs_Newsletter Subscription'});
          // ------------------------------------------------------------------ check visible selectors
          }
        // -------------------------------------- begin check interval
        },500);
      }
      });

      /* DATALAYER: Wishlist
      ------------------------------------- */
      setTimeout( function(){

        $(__bva__.wishlistSelector).on('click', function () {
          dataLayer.push(product,
            {'event': 'cs_Add to Wishlist'});
          if(__bva__.debug){
            console.log("Wishlist"+" :"+JSON.stringify(product, null, " "));
          }
        });

        if(document.location.pathname == __bva__.wishlistPage){
          var __bva__productLinks = $('[href*="product"]');
          var __bva__prods        = [];
          var __bva__links        = [];
          var __bva__count        = 1;

          $(__bva__productLinks).each(function(){
            var href = $(this).attr("href");
            if(!__bva__links.includes(href)){
              __bva__links.push(href);
              $(this).attr("dataLayer-wishlist-item",__bva__count++);
              jQuery.getJSON(href, function (response) {
              // --------------------------------------------- get Json response 
                __bva__.wishlist = response;
                var wishlistproducts = {
                'item_id'   : __bva__.wishlist.product.id,
                'item_name' : __bva__.wishlist.product.title,
                };
                __bva__prods.push(wishlistproducts);
              // --------------------------------------------- get Json response 
              });
            }
          });

          dataLayer.push({'items': __bva__prods, 
            'pageType' : 'Wishlist',
            'event'    : 'cs_add_to_wishlist'});
          }

        var __bva__count = 1;
        var wishlistDel  = $(__bva__.removeWishlist);
        wishlistDel.each(function(){
          $(this).attr("dataLayer-wishlist-item-del",__bva__count++);
        });

        $(__bva__.removeWishlist).on('click', function(){
          var index = $(this).attr("dataLayer-wishlist-item-del");
          var link  = $("[dataLayer-wishlist-item="+index+"]").attr("href");
          jQuery.getJSON(link, function (response) {
          // --------------------------------------------- get Json response 
            __bva__.wishlist     = response;
            var wishlistproducts = {
              'id'   : __bva__.wishlist.product.id,
              'name' : __bva__.wishlist.product.title,
            };

            dataLayer.push({'products': wishlistproducts,
            'pageType' : 'Wishlist',
            'event'    : 'cs_Wishlist Delete Product'});
          // --------------------------------------------- get Json response 
          });
        })
      }, 3000);

      /* DATALAYER: CTAs
      ------------------ */
      $(__bva__.ctaSelectors).on('click', function () {
        var ctaCheck = setInterval(function () {
        // -------------------------------------- begin check interval
          if ($(__bva__.ctaSuccess).length > 0) {
          // ------------------------------------------------------------------ check visible selectors
            clearInterval(ctaCheck);
            dataLayer.push({'event': 'cs_CTA'});
          // ------------------------------------------------------------------ check visible selectors
          }
        // -------------------------------------- begin check interval
        },500);
      });

      /* DATALAYER: Promo Subscriptions
      --------------------------------- */
      $(__bva__.promoSubscriptionsSelectors).on('click', function () {
        var ctaCheck = setInterval(function () {
        // -------------------------------------- begin check interval
          if ($(__bva__.promoSuccess).length > 0) {
          // ------------------------------------------------------------------ check visible selectors
            clearInterval(ctaCheck);
            dataLayer.push({'event': 'cs_Promo Subscription'});
          // ------------------------------------------------------------------ check visible selectors
          }
        // -------------------------------------- begin check interval
        },500);
      });

    /** DOM Ready **/	
    $(document).ready(function() {
      /** DATALAYER: Banners viewed **/

      const trackVisibleBanners = () => {
          // non-slider banners
          const bannerContainers = document.querySelectorAll('.DL__banner-container');

          bannerContainers.forEach((bannerContainer) => {
              if (!bannerContainer.classList.contains('ga-viewed') && 
                  isElementVisible(bannerContainer)) { // Só dispara se estiver visível na viewport

                  bannerContainer.classList.add('ga-viewed'); // Marca como visualizado

                  const eventBannerType = bannerContainer.getAttribute('data-type');
                  const eventBannerImgUrl = bannerContainer.getAttribute('data-img-url');
                  const eventBannerText = bannerContainer.getAttribute('data-text');
                  const eventBannerLink = bannerContainer.getAttribute('data-url-link');
                  const eventBannerIndex = bannerContainer.getAttribute('data-index');

                  const promotionData = {
                      'event': 'view_promotion',
                      'banner_position': eventBannerIndex,
                      'banner_type': eventBannerType,
                      'banner_image_url': eventBannerImgUrl,
                      'banner_text': eventBannerText,
                      'banner_link_url': eventBannerLink
                  };
                  
                  dataLayer.push(promotionData);

                  bannerContainer.addEventListener('click', () => {
                      const clickEvent = { ...promotionData, event: 'select_promotion' };
                      dataLayer.push(clickEvent);

                      if (window.__bva__.debug) {
                          console.log('select_promotion:', clickEvent);
                      }
                  });
              }
          });

        // Slider Banners
        document.querySelectorAll('.slideshow__slide').forEach((slide) => {
          if (slide.classList.contains('is-selected') && 
              !slide.classList.contains('ga-viewed') && 
              isElementVisible(slide)) { // Só dispara se estiver visível na viewport

            slide.classList.add('ga-viewed'); // Marca como visualizado

            const slideDetails = slide.querySelector('.slide-details');
            if (!slideDetails) return;

            const eventSlideType = slideDetails.getAttribute('data-type');
            const eventSlideImgUrl = slideDetails.getAttribute('data-img-url');
            const eventSlideText = slideDetails.getAttribute('data-text');
            const eventSlideLink = slideDetails.getAttribute('data-url-link');
            const eventSlideIndex = slideDetails.getAttribute('data-index');

            const promotionData = {
              'event': 'view_promotion',
              'banner_position': eventSlideIndex,
              'banner_type': eventSlideType,
              'banner_image_url': eventSlideImgUrl,
              'banner_text': eventSlideText,
              'banner_link_url': eventSlideLink
            };
            
            dataLayer.push(promotionData);

            slide.addEventListener('click', () => {
              const clickEvent = { ...promotionData, event: 'select_promotion' };
              dataLayer.push(clickEvent);

              if (window.__bva__.debug) {
                console.log('select_promotion:', clickEvent);
              }
            });
          }
        });
      };

      const observer = new MutationObserver(trackVisibleBanners);
      document.querySelector('.slideshow__carousel')?.addEventListener('transitionend', trackVisibleBanners);
      observer.observe(document.body, { childList: true, subtree: true });

      trackVisibleBanners();
      $(window).scroll(trackVisibleBanners); 


      /** DATALAYER: Search Results */
      var searchPage = new RegExp(__bva__.searchPage, "g");
      if(document.location.pathname.match(searchPage)){
        var ecommerce = {
          items :[{% for product in search.results %}{
            'index'          : {{ forloop.index0 }},
            'item_id'        : "{{ product.id | json }}",                  
            'item_name'      : {{ product.title | json }},
            'price'          : {{ product.price | money_without_currency | replace: ',', '.' | json }},
            'item_brand'     : {{product.vendor | json}},
            'item_category'  : {{product.type | json}},
            'item_list_id'   : "search_result",
            'item_list_name' : `Search: ${ __bva__.searchTermQuery}`
          },{% endfor %}],
        };
        dataLayer.push({ ecommerce: null }); // Clean Prevent Items

        dataLayer.push({
          'pageType'   : "Search",
          'event'      : "view_item_list",
          'item_list_id': "search_result",
          'item_list_name'  : `Search: ${ __bva__.searchTermQuery}`,
          ecommerce
        }); 
      }
      // For predctive search, added in 'theme.js.liquid' on function _doPredictiveSearch

    }); // document ready

  // --------------- run script after jQuery has loaded
  }
}, 500);
</script>